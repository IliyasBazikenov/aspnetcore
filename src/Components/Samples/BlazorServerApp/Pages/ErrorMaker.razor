@page "/errormaker"

<fieldset>
    <legend>Error maker</legend>

    <fieldset>
        <legend>Event handlers</legend>
        <button @onclick="@EventHandlerErrorSync">Synchronous</button>
        <button @onclick="@EventHandlerErrorAsync">Asynchronous</button>
    </fieldset>

    <fieldset>
        <legend>Lifecycle methods</legend>
        <div><label><input @bind="throwInOnParametersSet" type="checkbox" /> OnParametersSet (sync)</label></div>
        <div><label><input @bind="throwInOnParametersSetAsync" type="checkbox" /> OnParametersSetAsync (async)</label></div>
        <div><label><input @bind="throwInOnAfterRender" type="checkbox" /> OnAfterRender (sync)</label></div>
        <div><label><input @bind="throwInOnAfterRenderAsync" type="checkbox" /> OnAfterRenderAsync (async)</label></div>
        <ErrorCausingChild ThrowOnParametersSet="@throwInOnParametersSet"
                           ThrowOnParametersSetAsync="@throwInOnParametersSetAsync"
                           ThrowOnAfterRender="@throwInOnAfterRender"
                           ThrowOnAfterRenderAsync="@throwInOnAfterRenderAsync" />
    </fieldset>

    <fieldset>
        <legend>Rendering</legend>
        <label><input @bind="throwWhileRendering" type="checkbox" /> Throw during rendering</label>
        @if (throwWhileRendering)
        {
            throw new InvalidTimeZoneException($"Exception from {nameof(BuildRenderTree)}");
        }
    </fieldset>
</fieldset>

@code {
    // Also consider:
    // - Attach
    // - Dispose/DisposeAsync
    // - InvokeAsync

    private bool throwInOnParametersSet;
    private bool throwInOnParametersSetAsync;
    private bool throwInOnAfterRender;
    private bool throwInOnAfterRenderAsync;
    private bool throwWhileRendering;

    void EventHandlerErrorSync()
        => throw new InvalidTimeZoneException("Synchronous error from event handler");

    async Task EventHandlerErrorAsync()
    {
        await Task.Yield();
        throw new InvalidTimeZoneException("Asynchronous error from event handler");
    }
}
